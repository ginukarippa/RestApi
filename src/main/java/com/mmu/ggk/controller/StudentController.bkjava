package com.mmu.ggk.controller;

import java.util.List;
import java.util.NoSuchElementException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.mmu.ggk.Student;
import com.mmu.ggk.StudentService;

@RestController
public class StudentControllerbk {

	@Autowired
	private StudentService service;
	

	public StudentService getService() {
		return service;
	}

	public void setService(StudentService service) {
		this.service = service;
	}

	@GetMapping("/students")
	public List<Student> list() {
		return service.listAll();
	}

	@GetMapping("/students/{id}")
	public Student getId(@PathVariable Integer id) {
		return service.get(id);
	}
	
		
	@PostMapping("/students/add")
	public void add(@RequestBody Student student) {
		service.save(student);
	}

	@PutMapping("/students/update/{id}")
	public ResponseEntity<?> update(@RequestBody Student student, @PathVariable Integer id) {
		System.out.println(" Student exist............."+id);
		System.out.println(" Student exist............."+student.getId());
		System.out.println(" Student exist............."+service.get(id));
		
		try {
			
			Student existStudent = service.get(id);
			if(null!= existStudent) {
			System.out.println(" Student exist............."+existStudent.getId());	
			existStudent.setEmail(student.getEmail());
			existStudent.setName(student.getName());			
			service.save(existStudent);
			
				
			}else {
				
				return new ResponseEntity<>(HttpStatus.NOT_FOUND);
			}
			return new ResponseEntity<>(HttpStatus.OK);
			
		} catch (NoSuchElementException e) {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	   @DeleteMapping("/delete/{id}")
	    @PreAuthorize("hasRole('ADMIN')")
	    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
	        service.delete(id.intValue());
	        return ResponseEntity.noContent().build();
	    }
}
